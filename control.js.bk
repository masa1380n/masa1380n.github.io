const API_KEY = "5eecf820-22c6-4bac-a6bb-d6032fd19e7b";

const Peer = window.Peer;

const SERVER_ID = "remote-monitor-server";
const CLIENT_ID = "remote-monitor-client";

(async function main() {
    //for client
    const remoteVideo = document.getElementById('js-remote-stream');
    const attemptApply = document.getElementById('js-attempt-apply');
    const forwardApply = document.getElementById('js-forward-apply');


    //for server
    let localVideo = document.getElementById('js-local-stream');
    const captureTrigger = document.getElementById('js-startcapture-trigger');
    const deleteCapturteTrigger = document.getElementById('js-deletecapture-trigger');

    let localVideoCodec = document.getElementById('js-video-codec').value;
    let localVideoType = 'camera';
    let peer = null
    let targetDevice = null;
    let mediaConnection = null;
    let dataConnection = null;
    let videoTrack;
    var videoTrackSettings;

    //both
    const callTrigger = document.getElementById('js-call-trigger');
    const closeTrigger = document.getElementById('js-close-trigger');
    const messages = document.getElementById('js-messages');
    const localText = document.getElementById('js-local-text');
    const sendTrigger = document.getElementById('js-send-trigger');


    //for make peer
    const makePeerTrigger = document.getElementById('js-makepeer-trigger');
    const localId = document.getElementById('js-local-id');
    const remoteId = document.getElementById('js-remote-id');


    makePeerTrigger.addEventListener('click', () => {
        var userName = document.getElementById('js-your-id').value;
        console.log(userName);
        peer = (window.peer = new Peer(userName,
            {
                key: API_KEY,
                debug: 3
            }
        ))
        //document.getElementById('js-local-id') = String(peer);
        peer.on('open', id => (localId.textContent = id));
        waitCall();
    });

    function populateCameras() {
        if (!("mediaDevices" in navigator)) return;
        navigator.mediaDevices.enumerateDevices().then(mediaDevices => {
            while (cameraSelect.options.length > 0) {
                cameraSelect.remove(0);
            }
            const defaultOption = document.createElement("option");
            defaultOption.id = "default";
            defaultOption.textContent = "(default camera) ";
            cameraSelect.appendChild(defaultOption);

            const videoInputDevices = mediaDevices.filter(
                mediaDevice => mediaDevice.kind == "videoinput"
            );
            if (videoInputDevices.length > 0) {
                cameraSelect.disabled = false;
            }
            videoInputDevices.forEach((videoInputDevice, index) => {
                if (!videoInputDevice.deviceId) {
                    return;
                }
                const option = document.createElement("option");

                option.id = videoInputDevice.deviceId;
                option.textContent = videoInputDevice.label || `Camera ${index + 1}`;
                option.selected = deviceId == option.id;
                cameraSelect.appendChild(option);
            });
        });
    }

    window.addEventListener("DOMContentLoaded", populateCameras);
    if ("mediaDevices" in navigator) {
        navigator.mediaDevices.addEventListener("devicechange", populateCameras);
    }

    let deviceId = "default";
    cameraSelect.onchange = _ => {
        deviceId = cameraSelect.selectedOptions[0].id;
        targetDevice = deviceId
    };

    let videoCallOptions = {
        videoBandwidth: Number(document.getElementById('js-video-byte').value),
        videoCodec: String(document.getElementById('js-video-codec').value),
        audioCodec: "opus"
    };

    let localStream = null;

    captureTrigger.addEventListener('click', () => {
        if (localVideoType == 'camera') {
            navigator.mediaDevices.getUserMedia({
                audio: false,
                video: {
                    width: Number(document.getElementById('video-width').value),
                    height: Number(document.getElementById('video-height').value),
                    frameRate: Number(document.getElementById('video-rate').value),
                    deviceId: String(targetDevice),
                    pan: true,
                    tilt: true,
                    zoom: true
                }
            }).then(function (mediaStream) {
                localStream = mediaStream;
                localVideo.srcObject = mediaStream;
                localVideo.playsInline = true;
                localVideo.play().catch(console.error);
                videoTrack = localStream.getTracks()[1];//[0]is audio,[1]is video
                videoTrackSettings = videoTrack.getSettings();
                capabilities = videoTrack.getCapabilities();
                videoTrack.contentHint = document.getElementById("js-video-content").value;
                document.getElementById("js-estimated-latency").textContent = videoTrackSettings.latency;
                //console.log(targetDevice);
            })
        }
        else if (localVideoType == 'screen') {
            navigator.mediaDevices.getDisplayMedia({
                audio: false,
                video: {
                    width: Number(document.getElementById('video-width').value),
                    height: Number(document.getElementById('video-height').value),
                    frameRate: Number(document.getElementById('video-rate').value)
                }
            }).then(function (mediaStream) {
                localStream = mediaStream;
                localVideo.srcObject = mediaStream;
                localVideo.playsInline = true;
                localVideo.play().catch(console.error);
                videoTrack = localStream.getTracks()[0];
                var videoTrackSettings = videoTrack.getSettings();
                videoTrack.contentHint = document.getElementById("js-video-content").value;
                document.getElementById("js-estimated-latency").textContent = videoTrackSettings.latency;
            });
        }
    })

    deleteCapturteTrigger.avideo - panddEventListener('click', () => {
        localStream = null;
        localVideo.srcObject = null;
    })

    // Register caller handler
    callTrigger.addEventListener('click', () => {

        if (peer == null) {
            console.log('Peer is not opened');
        }
        if (peer != null) {
            // Note that you need to ensure the peer has connected to signaling server
            // before using methods of peer instance.
            /*if (!peer.open) {
              return;
            }*/

            videoCallOptions.videoBandwidth = Number(document.getElementById('js-video-byte').value);
            videoCallOptions.videoCodec = String(document.getElementById('js-video-codec').value);
            //console.log(videoCallOptions);
            mediaConnection = peer.call(remoteId.value, localStream, videoCallOptions);

            mediaConnection.on('stream', async (stream) => {
                console.log('MORATTAYO')
                // Render remote stream for caller
                remoteVideo.srcObject = stream;
                remoteVideo.playsInline = true;
                await remoteVideo.play().catch(console.error);
            });

            mediaConnection.once('close', () => {
                remoteVideo.srcObject.getTracks().forEach(track => track.stop());
                remoteVideo.srcObject = null;
            });

            dataConnection = peer.connect(remoteId.value);

            dataConnection.once('open', async () => {
                messages.textContent += `=== DataConnection has been opened ===\n`;
                sendTrigger.addEventListener('click', onClickSend);
            });

            dataConnection.on('data', data => {
                messages.textContent += `${dataConnection.remoteId}: ${data}\n`;
            });

            dataConnection.once('close', () => {
                messages.textContent += `=== DataConnection has been closed ===\n`;
                sendTrigger.removeEventListener('click', onClickSend);

            });

            function onClickSend() {
                const data = localText.value;
                dataConnection.send(data);

                messages.textContent += `You: ${data}\n`;
                localText.value = '';
            }

            closeTrigger.addEventListener('click', () => mediaConnection.close(true));
        }
    });

    function waitCall() {
        if (peer != null) {
            peer.on('call', mediaConnection => {

                let videoAnswerOptions = {
                    videoBandwidth: Number(document.getElementById('js-video-byte').value),
                    videoCodec: String(document.getElementById('js-video-codec').value),
                    audioCodec: "opus"
                };
                videoAnswerOptions.videoBandwidth = Number(document.getElementById('js-video-byte').value);
                //videoAnswerOptions.videoCodec = String(document.getElementById('js-video-codec').value);
                //console.log(videoAnswerOptions);

                mediaConnection.answer(localStream, videoAnswerOptions);

                mediaConnection.on('stream', async (stream) => {
                    // Render remote stream for callee
                    remoteVideo.srcObject = stream;
                    remoteVideo.playsInline = true;
                    await remoteVideo.play().catch(console.error);
                });

                mediaConnection.once('close', () => {
                    remoteVideo.srcObject.getTracks().forEach(track => track.stop());
                    remoteVideo.srcObject = null;
                });

                closeTrigger.addEventListener('click', () => mediaConnection.close(true));
            });

            peer.on('connection', dataConnection => {
                dataConnection.once('open', async () => {
                    messages.textContent += `=== DataConnection has been opened ===\n`;
                    sendTrigger.addEventListener('click', onClickSend);
                });

                dataConnection.on('data', data => {
                    messages.textContent += `${dataConnection.remoteId}: ${data}\n`;
                    if (data.match("pan")) {
                        var splitPan = data.split(",");
                        document.getElementById('video-pan').value = splitPan[1];
                        console.log("Pan was adjusted");
                    }
                    else if (data.match("tilt")) {
                        var splitTilt = data.split(",");
                        document.getElementById('video-tilt').value = splitTilt[1];
                        console.log("Tilt was adjusted");
                    }
                    else if (data.match("zoom")) {
                        var splitZoom = data.split(",");
                        document.getElementById('video-zoom').value = splitZoom[1];
                        console.log("Zoom was adjusted");
                    }
                });

                dataConnection.once('close', () => {
                    messages.textContent += `=== DataConnection has been closed ===\n`;
                    sendTrigger.removeEventListener('click', onClickSend);
                });

                // Register closing handler
                closeTrigger.addEventListener('click', () => dataConnection.close(true), {
                    once: true,
                });

                function onClickSend() {
                    const data = localText.value;
                    dataConnection.send(data);

                    messages.textContent += `You: ${data}\n`;
                    localText.value = '';
                }
            });
            peer.on('error', console.error);
        }
    }
}
)();



// const cameraInit = () => {
//     const video = document.getElementById('video');
//     navigator.mediaDevices
//         .getUserMedia({
//             video: true,
//             audio: false,
//         })
//         .then((stream) => {
//             video.srcObject = stream;
//             video.play();
//         })
//         .catch((e) => {
//             console.log(e);
//         });
// }

// const devices = (await navigator.mediaDevices.enumerateDevices())
//     .filter((device) => device.kind === 'videoinput')
//     .map((device) => {
//         return {
//             text: device.label,
//             value: device.deviceId,
//         };
//     });

// function populateCameras() {
//     if (!("mediaDevices" in navigator)) return;
//     navigator.mediaDevices.enumerateDevices().then(mediaDevices => {
//         while (cameraSelect.options.length > 0) {
//             cameraSelect.remove(0);
//         }
//         const defaultOption = document.createElement("option");
//         defaultOption.id = "default";
//         defaultOption.textContent = "(default camera) ";
//         cameraSelect.appendChild(defaultOption);

//         const videoInputDevices = mediaDevices.filter(
//             mediaDevice => mediaDevice.kind == "videoinput"
//         );
//         if (videoInputDevices.length > 0) {
//             cameraSelect.disabled = false;
//         }
//         videoInputDevices.forEach((videoInputDevice, index) => {
//             if (!videoInputDevice.deviceId) {
//                 return;
//             }
//             const option = document.createElement("option");

//             option.id = videoInputDevice.deviceId;
//             option.textContent = videoInputDevice.label || `Camera ${index + 1}`;
//             option.selected = deviceId == option.id;
//             cameraSelect.appendChild(option);
//         });
//     });
// }

// let deviceId = "default";
// cameraSelect.onchange = _ => {
//     deviceId = cameraSelect.selectedOptions[0].id;
//     targetDevice = deviceId
// };
